/// <reference lib="webworker" />

import { base, build, files, prerendered, version } from '$service-worker';

const worker = self as unknown as ServiceWorkerGlobalScope;
const STATIC_CACHE_NAME = `cache--${version}`;
const APP_CACHE_NAME = `offline--${version}`;

/* hard-coded list of app routes we want to preemptively cache */
const routes = prerendered;

/* hard-coded list of other assets necessary for page load outside our domain */
const customAssets = [];

const addDomain = (files: string[]) => files.map((file) => {
    return self.location.origin + file;
});

const excludeFiles = new Set([
    base + '/',
    base + '/.nojekyll',
]);

/* `build` is an array of all the files generated by the bundler,
 * `files` is an array of everything in the `static` directory
 * `version` is the current version of the app
 */
const toCache = addDomain([
    ...build,
    ...files,
    ...routes,
].filter((file) => {
    return !excludeFiles.has(file);
})).concat(customAssets);
const staticAssets = new Set(toCache);

worker.addEventListener('install', (event) => {
    event.waitUntil(
        caches
            .open(STATIC_CACHE_NAME)
            .then(async (cache) => {
                try {
                    await cache.addAll(toCache);
                    return;
                } catch (err) {
                    let lastUrl = '';
                    try {
                        for (const url of toCache) {
                            lastUrl = url;
                            await cache.add(url);
                        }
                    } catch (err2) {
                        console.warn('error while caching "%s"', lastUrl);
                        console.error(err, err2);
                    }
                }
            })
            .then(() => {
                worker.skipWaiting();
            })
    );
});

worker.addEventListener('activate', (event) => {
    event.waitUntil(
        caches.keys().then(async (keys) => {
            /* delete old caches */
            for (const key of keys) {
                if (key !== STATIC_CACHE_NAME && key !== APP_CACHE_NAME) {
                    await caches.delete(key);
                }
            }

            worker.clients.claim();
        })
    );
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
    const cache = await caches.open(APP_CACHE_NAME);

    try {
        const response = await fetch(request);
        cache.put(request, response.clone());
        return response;
    } catch (err) {
        const response = await cache.match(request);
        if (response) {
            return response;
        }

        throw err;
    }
}

worker.addEventListener('fetch', (event) => {
    if (event.request.method !== 'GET' || event.request.headers.has('range')) {
        return;
    }

    const url = new URL(event.request.url);

    /* don't try to handle e.g. data: URIs */
    const isHttp = url.protocol.startsWith('http');
    const isDevServerRequest = url.hostname === self.location.hostname
        && url.port !== self.location.port;
    const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
    const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

    if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
        event.respondWith(
            (async () => {
                /* always serve static files and bundler-generated assets from cache.
                 * if your application has other URLs with data that will never change,
                 * set this variable to true for them and they will only be fetched once. */
                const cachedAsset = isStaticAsset && (await caches.match(event.request));

                return cachedAsset || fetchAndCache(event.request);
            })()
        );
    }
});
